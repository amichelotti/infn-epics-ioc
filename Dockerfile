##### build stage ##############################################################

ARG TARGET_ARCHITECTURE
ARG BASE=23.2.1

FROM  ghcr.io/epics-containers/epics-base-${TARGET_ARCHITECTURE}-developer:${BASE} AS developer

# IOC-TEMPLATE-TODO apt-get install additional build time dependencies
# RUN apt-get update && apt-get upgrade -y && \
#     apt-get install -y --no-install-recommends \
#     PACKAGES \
#     && rm -rf /var/lib/apt/lists/*

# override of epics-base ctools may occasionally be practical
COPY ctools /ctools/
# add the generic IOC source code. TODO: this will be generated by ibek in future
COPY ioc ${IOC}
# copy the global ibek files
COPY ibek-defs/_global /ctools/_global/

# IOC-TEMPLATE-TODO select the support modules you need
# get and build depdency support modules, for each also copy associated ibek defs
COPY ibek-defs/asyn/ /ctools/asyn/
RUN python3 modules.py install ASYN R4-42 github.com/epics-modules/asyn.git --patch asyn/asyn.sh
RUN make -C ${SUPPORT}/asyn -j $(nproc)

COPY ibek-defs/autosave/ /ctools/autosave/
RUN python3 modules.py install AUTOSAVE R5-10-2 github.com/epics-modules/autosave.git --patch autosave/autosave.sh
RUN make -C ${SUPPORT}/autosave -j $(nproc)

# build generic IOC
RUN make -C ${IOC} && make clean -C ${IOC}

##### runtime preparation stage ################################################

FROM developer AS runtime_prep

# get the products from the build stage and reduce to runtime assets only
WORKDIR /min_files
RUN bash /ctools/minimize.sh ${IOC} $(ls -d ${SUPPORT}/*/)

##### runtime stage ############################################################

FROM ghcr.io/epics-containers/epics-base-${TARGET_ARCHITECTURE}-runtime:${BASE} AS runtime

# IOC-TEMPLATE-TODO apt-get install additional runtime dependencies here

# add products from build stage
COPY --from=runtime_prep /min_files /
